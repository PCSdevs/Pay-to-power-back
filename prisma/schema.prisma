generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MigrationLock {
  id       String  @id @unique @default(uuid())
  isLocked Boolean
  lockedBy String
  uid      String
  gid      String
  env      String
  os       String
}

model Migration {
  id       String @id @unique @default(uuid())
  username String
  uid      String
  gid      String
  env      String
  os       String
  name     String
}

model User {
  id                  String                @id @default(uuid())
  email               String                @unique
  firstName           String?
  lastName            String?
  fullName            String?
  password            String?
  profileImg          String?
  lastLogin           DateTime?
  isVerified          Boolean               @default(false)
  isDeleted           Boolean               @default(false)
  isActive            Boolean               @default(true)
  isInvited           Boolean               @default(false)
  createdBy           String?
  updatedBy           String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  ForgotPasswordToken ForgotPasswordToken[]
  AccessToken         AccessToken[]
  invitedBy           Invitations[]         @relation("invitedBy")
  invitedTo           Invitations[]         @relation("invitedTo")
  VerifyUserToken     VerifyUserToken[]
  UserCompanyRole     UserCompanyRole[]
  SubscriptionHistory SubscriptionHistory[] @relation("ChangedByUser")
  Device              Device[]

  @@index([email])
}

model ForgotPasswordToken {
  id        String   @id @default(uuid())
  userId    String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AccessToken {
  id        String   @id @default(uuid())
  userId    String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id                  String            @id @default(uuid())
  roleName            String
  roleDescription     String?
  isSystem            Boolean           @default(false)
  isAdmin             Boolean           @default(false)
  isSuperAdmin        Boolean           @default(false)
  isSuperAdminCreated Boolean           @default(false)
  status              Boolean           @default(true)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  createdBy           String?
  companyId           String?
  Company             Company?          @relation(fields: [companyId], references: [id])
  updatedBy           String?
  UserCompanyRole     UserCompanyRole[]
  Permission          Permission[]
}

model Permission {
  id         String   @id @default(uuid())
  moduleName String
  all        Boolean  @default(false)
  view       Boolean  @default(false)
  edit       Boolean  @default(false)
  delete     Boolean  @default(false)
  add        Boolean  @default(false)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  sortId     Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model VerifyUserToken {
  id        String   @id @default(uuid())
  userId    String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model UserCompanyRole {
  id                  String        @id @default(uuid())
  user                User?         @relation(fields: [userId], references: [id])
  userId              String?
  role                Role          @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId              String
  company             Company?      @relation(fields: [companyId], references: [id])
  companyId           String?
  status              Boolean       @default(true)
  isSuperAdminCreated Boolean       @default(false)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  Invitations         Invitations[]
}

model Invitations {
  id                String           @id @default(uuid())
  invitedByUserId   String
  invitedBy         User             @relation("invitedBy", fields: [invitedByUserId], references: [id])
  invitedToUserId   String
  invitedTo         User             @relation("invitedTo", fields: [invitedToUserId], references: [id])
  userCompanyRoleId String?
  userCompanyRole   UserCompanyRole? @relation(fields: [userCompanyRoleId], references: [id])
  invitationStatus  InvitationStatus
  invitationToken   String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model Company {
  id              String            @id @default(uuid())
  name            String
  address         String?
  email           String?
  apiKey          String            @default(uuid())
  isDeleted       Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  createdBy       String?
  updatedBy       String?
  UserCompanyRole UserCompanyRole[]
  Role            Role[]
  Device          Device[]
  Subscription    Subscription[]

  SubscriptionHistory SubscriptionHistory[]
}

enum InvitationStatus {
  Pending
  Accepted
  Rejected
}

model Device {
  id                  String                @id @default(uuid())
  macAddress          String                @unique
  boardNumber         String
  generatedDeviceId   String                @unique
  name                String?
  secreteKey          String
  isClientModeOn      Boolean               @default(false)
  hotspotId           String?
  hotspotPassword     String?
  clientId            String?
  clientPassword      String?
  adminId             String?
  adminPassword       String?
  wifiSsid            String?             // check
  wifiPassword        String?           // this is the new password set for new hotspot.
  lastUpdated         DateTime              @updatedAt
  createdAt           DateTime              @default(now())
  subscriptions       Subscription[]
  subscriptionHistory SubscriptionHistory[]
  messages            Message[]
  user                User                  @relation(fields: [userId], references: [id])
  userId              String
  companyId           String?
  company             Company?              @relation(fields: [companyId], references: [id])
}

model Subscription {
  id             String                @id @default(uuid())
  device         Device                @relation(fields: [deviceId], references: [id])
  deviceId       String
  mode           String
  recurring      Boolean               @default(false)
  additionalTime String?
  dueTimestamp   DateTime?
  history        SubscriptionHistory[]
  companyId      String
  company        Company               @relation(fields: [companyId], references: [id])
}

model SubscriptionHistory {
  id             String             @id @default(uuid())
  subscription   Subscription       @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  device         Device             @relation(fields: [deviceId], references: [id])
  deviceId       String
  mode           String
  recurring      Boolean
  additionalTime String?
  dueTimestamp   DateTime?
  action         SubscriptionAction
  changedBy      User               @relation("ChangedByUser", fields: [changedById], references: [id])
  changedById    String
  changedAt      DateTime           @default(now())
  companyId      String
  company        Company            @relation(fields: [companyId], references: [id])
}

model Message {
  id             String         @id @default(uuid())
  deviceId       String
  topic          String
  payload        String
  timestamp      DateTime       @default(now())
  deliveryStatus DeliveryStatus @default(PENDING)
  device         Device         @relation(fields: [deviceId], references: [id])
}

enum SubscriptionAction {
  CREATED
  UPDATED
  CANCELLED
  RENEWED
}

enum DeliveryStatus {
  PENDING
  DELIVERED
  ACKNOWLEDGED
}
